// fixSchema.js
import pkg from "pg";
import dotenv from "dotenv";
dotenv.config();
const { Pool } = pkg;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function fix() {
  try {
    console.log("üîé Ki·ªÉm tra tr√πng l·∫∑p trong b·∫£ng books...");

    const dupRes = await pool.query(`
      SELECT name, author, array_agg(id ORDER BY id) AS ids, COUNT(*) AS cnt
      FROM books
      GROUP BY name, author
      HAVING COUNT(*) > 1
    `);

    if (dupRes.rowCount === 0) {
      console.log("‚úÖ Kh√¥ng c√≥ b·∫£n ghi tr√πng l·∫∑p.");
    } else {
      console.log(`‚ö†Ô∏è T√¨m th·∫•y ${dupRes.rowCount} nh√≥m tr√πng l·∫∑p. B·∫Øt ƒë·∫ßu dedupe...`);
      for (const r of dupRes.rows) {
        const ids = r.ids;
        const keep = ids[0];               // gi·ªØ id nh·ªè nh·∫•t
        const remove = ids.slice(1);       // xo√° c√°c id c√≤n l·∫°i

        console.log(`‚Üí Gi·ªØ id=${keep} cho [${r.name}] (${r.author}), x√≥a ids: ${remove.join(",")}`);

        await pool.query(
          `DELETE FROM books WHERE id = ANY($1::int[])`,
          [remove]
        );
      }
      console.log("‚úÖ ƒê√£ x√≥a c√°c b·∫£n ghi tr√πng. ");
    }

    // Th√™m UNIQUE constraint n·∫øu ch∆∞a t·ªìn t·∫°i
    console.log("üîß Th√™m UNIQUE constraint (name, author) n·∫øu ch∆∞a t·ªìn t·∫°i...");
    try {
      await pool.query(`
        ALTER TABLE books
        ADD CONSTRAINT unique_book_name_author UNIQUE (name, author);
      `);
      console.log("‚úÖ UNIQUE constraint ƒë√£ ƒë∆∞·ª£c th√™m.");
    } catch (err) {
      // n·∫øu constraint ƒë√£ t·ªìn t·∫°i, PostgreSQL tr·∫£ l·ªói ‚Äî catch v√† ti·∫øp t·ª•c
      if (err.code === '23505' || /already exists/i.test(err.message)) {
        console.log("‚ÑπÔ∏è UNIQUE constraint ƒë√£ t·ªìn t·∫°i tr∆∞·ªõc ƒë√≥.");
      } else {
        console.warn("‚ö†Ô∏è L·ªói khi th√™m constraint:", err.message);
      }
    }

    console.log("üéØ fixSchema ho√†n t·∫•t.");
    await pool.end();
    process.exit(0);
  } catch (err) {
    console.error("‚ùå fixSchema l·ªói:", err);
    await pool.end();
    process.exit(1);
  }
}

fix();
