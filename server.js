// server.js (final: intent-aware + natural chat + library logic)
import express from "express";
import bodyParser from "body-parser";
import pkg from "pg";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";
import path from "path";
import { fileURLToPath } from "url";

dotenv.config();

const app = express();
app.use(bodyParser.json());

// ===== path helpers =====
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ===== Postgres setup =====
const { Pool } = pkg;
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// ===== Gemini setup =====
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// ===== init tables =====
async function initTables() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS books (
      id SERIAL PRIMARY KEY,
      name TEXT NOT NULL,
      author TEXT NOT NULL,
      category TEXT,
      position TEXT,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);

  await pool.query(`
    CREATE TABLE IF NOT EXISTS conversations (
      id SERIAL PRIMARY KEY,
      role TEXT NOT NULL,
      message TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);
}
await initTables();

import("./seedBooks.js").catch(()=>{/* ignore if missing */});

// ===== helpers =====
function extractFirstJson(text) {
  if (!text || typeof text !== "string") return null;
  const match = text.match(/\{[\s\S]*\}/);
  if (!match) return null;
  try {
    return JSON.parse(match[0]);
  } catch {
    return null;
  }
}

const VALID_CATEGORIES = [
  "C√¥ng ngh·ªá",
  "VƒÉn h·ªçc",
  "L·ªãch s·ª≠",
  "Kinh t·∫ø",
  "T√¢m l√Ω",
  "Gi√°o d·ª•c",
  "Ch√≠nh tr·ªã",
  "Ch∆∞a r√µ"
];

function normalizeCategory(input) {
  if (!input) return "Ch∆∞a r√µ";
  input = input.trim().toLowerCase();
  for (const c of VALID_CATEGORIES) {
    if (c.toLowerCase() === input) return c;
  }
  if (/(tech|code|ai|data|l·∫≠p tr√¨nh|m√°y t√≠nh)/i.test(input)) return "C√¥ng ngh·ªá";
  if (/(truy·ªán|ti·ªÉu thuy·∫øt|vƒÉn h·ªçc|novel|k√Ω)/i.test(input)) return "VƒÉn h·ªçc";
  if (/(l·ªãch s·ª≠|chi·∫øn tranh|history|war)/i.test(input)) return "L·ªãch s·ª≠";
  if (/(kinh t·∫ø|t√†i ch√≠nh|business|economy)/i.test(input)) return "Kinh t·∫ø";
  if (/(t√¢m l√Ω|psychology)/i.test(input)) return "T√¢m l√Ω";
  if (/(gi√°o d·ª•c|education)/i.test(input)) return "Gi√°o d·ª•c";
  if (/(ch√≠nh tr·ªã|politic)/i.test(input)) return "Ch√≠nh tr·ªã";
  return "Ch∆∞a r√µ";
}

async function assignPosition(category) {
  const finalCategory = normalizeCategory(category);
  const letter = finalCategory[0].toUpperCase();
  const res = await pool.query("SELECT COUNT(*) FROM books WHERE category = $1", [finalCategory]);
  const count = parseInt(res.rows[0].count || "0", 10);
  const shelf = Math.floor(count / 15) + 1;
  return `${letter}${shelf}`;
}

async function inferCategory(bookName, author) {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

  const prompt = `
B·∫°n l√† th·ªß th∆∞ chuy√™n nghi·ªáp. D·ª±a tr√™n t√™n v√† t√°c gi·∫£, ch·ªçn th·ªÉ lo·∫°i ph√π h·ª£p nh·∫•t t·ª´ danh s√°ch sau:
${VALID_CATEGORIES.join(", ")}.

Tr·∫£ v·ªÅ JSON duy nh·∫•t: {"category": "T√™n th·ªÉ lo·∫°i ch√≠nh x√°c trong danh s√°ch"}.
T√™n: "${bookName}"
T√°c gi·∫£: "${author}"
`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }]
    });
    const raw = result.response.text();
    const parsed = extractFirstJson(raw);
    return normalizeCategory(parsed?.category);
  } catch (e) {
    console.error("‚ö†Ô∏è inferCategory error:", e);
    return "Ch∆∞a r√µ";
  }
}

async function askGeminiToChoose(message, books, context = "") {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

  const prompt = `
B·∫°n l√† tr·ª£ l√Ω th∆∞ vi·ªán. D·ª±a tr√™n ƒëo·∫°n h·ªôi tho·∫°i g·∫ßn ƒë√¢y:
${context}

Ng∆∞·ªùi d√πng v·ª´a n√≥i: "${message}"

Danh s√°ch s√°ch: ${JSON.stringify(books, null, 2)}

Tr·∫£ v·ªÅ JSON duy nh·∫•t:
{
 "title": "T√™n s√°ch EXACT t·ª´ DB",
 "author": "T√°c gi·∫£ EXACT t·ª´ DB",
 "category": "Th·ªÉ lo·∫°i EXACT t·ª´ DB",
 "location": "V·ªã tr√≠ EXACT t·ª´ DB",
 "reason": "Gi·∫£i th√≠ch ng·∫Øn (1-2 c√¢u)"
}
`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }]
    });
    const raw = result.response.text();
    return extractFirstJson(raw);
  } catch (e) {
    console.error("‚ö†Ô∏è askGeminiToChoose error:", e);
    return null;
  }
}

async function askGeminiForRecap(bookTitle, author) {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

  const prompt = `
B·∫°n l√† tr·ª£ l√Ω t√≥m t·∫Øt s√°ch chuy√™n nghi·ªáp.
T√≥m t·∫Øt ng·∫Øn (100-200 t·ª´) n·ªôi dung, ch·ªß ƒë·ªÅ v√† ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi ƒë·ªçc c·ªßa cu·ªën:
- T√™n: "${bookTitle}"
- T√°c gi·∫£: "${author}"

Tr·∫£ v·ªÅ JSON duy nh·∫•t:
{"title":"${bookTitle}", "author":"${author}", "recap":"T√≥m t·∫Øt ng·∫Øn g·ªçn kh√¥ng qu√° 200 t·ª´"}
`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }]
    });
    const raw = result.response.text();
    return extractFirstJson(raw);
  } catch (e) {
    console.error("‚ö†Ô∏è askGeminiForRecap error:", e);
    return null;
  }
}

async function chatWithGeminiFreeform(message, context = "") {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
  const prompt = `
B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán, th√¥ng minh, n√≥i chuy·ªán t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát.
B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ki·∫øn th·ª©c hi·ªán t·∫°i ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c, d·ªÖ hi·ªÉu.

Ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥:
${context}

Ng∆∞·ªùi d√πng: "${message}"

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c, d·ªÖ hi·ªÉu v√† th√¢n thi·ªán.
`;
  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }]
    });
    return (
      result.response?.candidates?.[0]?.content?.parts?.[0]?.text ||
      result.response?.text() ||
      "‚ö†Ô∏è Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Gemini."
    );
  } catch (e) {
    console.error("‚ö†Ô∏è chatWithGeminiFreeform error:", e);
    return "‚ö†Ô∏è Xin l·ªói, m√¨nh ch∆∞a th·ªÉ ph·∫£n h·ªìi l√∫c n√†y.";
  }
}

// ===== Intent Detection =====
async function detectIntent(message, context = "") {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

  const prompt = `
B·∫°n l√† b·ªô ph√¢n t√≠ch ng·ªØ nghƒ©a c·ªßa ·ª©ng d·ª•ng qu·∫£n l√Ω th∆∞ vi·ªán.

Ph√¢n lo·∫°i c√¢u sau th√†nh m·ªôt trong c√°c lo·∫°i sau:
- add_book
- delete_book
- ask_position
- ask_recap
- search_book
- smalltalk
- other

Tr·∫£ v·ªÅ JSON duy nh·∫•t: {"intent": "<gi√° tr·ªã>"}

Ng·ªØ c·∫£nh g·∫ßn ƒë√¢y:
${context}

C√¢u ng∆∞·ªùi d√πng: "${message}"
`;

  try {
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }]
    });
    const raw = result.response.text();
    const parsed = extractFirstJson(raw);
    return parsed?.intent || "other";
  } catch (e) {
    console.error("‚ö†Ô∏è detectIntent error:", e);
    return "other";
  }
}

// ===== Serve index.html =====
app.get("/", (req, res) => res.sendFile(path.join(__dirname, "index.html")));

// ===== /chat endpoint =====
app.post("/chat", async (req, res) => {
  const { message } = req.body;
  if (!message) return res.status(400).json({ error: "Thi·∫øu 'message'" });

  try {
    await pool.query("INSERT INTO conversations (role, message) VALUES ($1, $2)", ["user", message]);

    const histRes = await pool.query("SELECT role, message FROM conversations ORDER BY id DESC LIMIT 6");
    const recent = histRes.rows.reverse().map(r => `${r.role === "user" ? "Ng∆∞·ªùi d√πng" : "Tr·ª£ l√Ω"}: ${r.message}`).join("\n");

    const intent = await detectIntent(message, recent);
    console.log("üß† intent:", intent);

    let reply = "";
    const lower = message.toLowerCase();

    // === T√ôY THEO INTENT ===
    if (intent === "add_book") {
      const match = message.match(/bn:\s*([^;]+);\s*at:\s*(.+)/i);
      if (!match) reply = "‚ùå Sai c√∫ ph√°p. D√πng: add book: bn: T√™n s√°ch; at: T√°c gi·∫£";
      else {
        const [_, bookName, author] = match;
        const category = await inferCategory(bookName, author);
        const position = await assignPosition(category);
        await pool.query(
          "INSERT INTO books (name, author, category, position) VALUES ($1,$2,$3,$4)",
          [bookName.trim(), author.trim(), category, position]
        );
        reply = `‚úÖ ƒê√£ th√™m s√°ch: "${bookName.trim()}" (${author.trim()})\nTh·ªÉ lo·∫°i: ${category}\nV·ªã tr√≠: ${position}`;
      }
    } else if (intent === "delete_book") {
      const match = message.match(/bn:\s*([^;]+);\s*at:\s*(.+)/i);
      if (!match) reply = "‚ùå Sai c√∫ ph√°p. D√πng: delete book: bn: T√™n s√°ch; at: T√°c gi·∫£";
      else {
        const [_, bookName, author] = match;
        const result = await pool.query("DELETE FROM books WHERE name=$1 AND author=$2 RETURNING *", [bookName.trim(), author.trim()]);
        reply = result.rowCount
          ? `üóëÔ∏è ƒê√£ xo√° s√°ch "${bookName}" c·ªßa ${author}`
          : `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch "${bookName}" c·ªßa ${author}`;
      }
    } else if (intent === "ask_position") {
      const m = lower.match(/\bv·ªã tr√≠\s+([A-Z]\d+)\b/i);
      const pos = m ? m[1].toUpperCase() : null;
      if (!pos) reply = "‚ö†Ô∏è H√£y nh·∫≠p v·ªã tr√≠ theo d·∫°ng v√≠ d·ª•: 'v·ªã tr√≠ B2 l√† quy·ªÉn g√¨'";
      else {
        const { rows } = await pool.query("SELECT name, author, category FROM books WHERE position=$1 LIMIT 1", [pos]);
        reply = rows.length
          ? `üìö ·ªû v·ªã tr√≠ ${pos}: "${rows[0].name}" (${rows[0].author})\nTh·ªÉ lo·∫°i: ${rows[0].category || "Ch∆∞a r√µ"}`
          : `üì≠ Kh√¥ng c√≥ s√°ch ·ªü v·ªã tr√≠ ${pos}.`;
      }
    } else if (intent === "ask_recap") {
      let guess = message.replace(/["'‚Äò‚Äô‚Äú‚Äù]/g, "").toLowerCase();
      guess = guess.replace(/\b(recape?|t√≥m t·∫Øt|summary|gi√∫p|cu·ªën|s√°ch|h√£y|n·ªôi dung|cho t√¥i|v·ªÅ|ƒëi)\b/g, "").trim();
      const q = await pool.query(
        `SELECT name, author, category, position FROM books 
         WHERE LOWER(name) LIKE $1 OR LOWER(author) LIKE $1 LIMIT 1`,
        [`%${guess}%`]
      );
      const target = q.rows[0];
      if (!target) reply = "‚ö†Ô∏è M√¨nh ch∆∞a r√µ b·∫°n mu·ªën t√≥m t·∫Øt quy·ªÉn n√†o. H√£y n√≥i t√™n s√°ch c·ª• th·ªÉ nh√©.";
      else {
        const recap = await askGeminiForRecap(target.name, target.author);
        reply = recap?.recap
          ? `üìñ "${target.name}" (${target.author})\nTh·ªÉ lo·∫°i: ${target.category}, V·ªã tr√≠: ${target.position}\n\nüìù ${recap.recap}`
          : `‚ö†Ô∏è Kh√¥ng t√≥m t·∫Øt ƒë∆∞·ª£c l√∫c n√†y.`;
      }
    } else if (intent === "search_book") {
      const { rows: books } = await pool.query("SELECT name, author, category, position FROM books");
      const keywords = lower;
      const matches = books.filter(b =>
        b.name.toLowerCase().includes(keywords) ||
        b.author.toLowerCase().includes(keywords) ||
        b.category.toLowerCase().includes(keywords)
      );
      if (matches.length) {
        const b = matches[0];
        reply = `üìö "${b.name}" (${b.author})\nTh·ªÉ lo·∫°i: ${b.category}, V·ªã tr√≠: ${b.position}`;
      } else reply = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p.";
    } else {
      reply = await chatWithGeminiFreeform(message, recent);
    }

    await pool.query("INSERT INTO conversations (role, message) VALUES ($1, $2)", ["assistant", reply]);
    res.json({ reply });
  } catch (err) {
    console.error("‚ùå Chat error:", err);
    res.status(500).json({ error: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ Server ƒëang ch·∫°y tr√™n c·ªïng ${PORT}`));
