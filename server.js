import express from "express";
import bodyParser from "body-parser";
import pkg from "pg";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";

dotenv.config();

const app = express();
app.use(bodyParser.json());

const { Pool } = pkg;
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// Gemini setup
const ai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// ===== T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥ =====
async function initTables() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS books (
      id SERIAL PRIMARY KEY,
      name TEXT NOT NULL,
      author TEXT NOT NULL,
      category TEXT,
      position TEXT,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);

  await pool.query(`
    CREATE TABLE IF NOT EXISTS conversations (
      id SERIAL PRIMARY KEY,
      role TEXT NOT NULL,
      message TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);

  await pool.query(`
    CREATE TABLE IF NOT EXISTS categories (
      id SERIAL PRIMARY KEY,
      name TEXT UNIQUE NOT NULL,
      prefix CHAR(1) NOT NULL
    )
  `);

  // Seed categories n·∫øu tr·ªëng
  const existing = await pool.query("SELECT COUNT(*) FROM categories");
  if (parseInt(existing.rows[0].count) === 0) {
    await pool.query(`
      INSERT INTO categories (name, prefix) VALUES
      ('C√¥ng ngh·ªá','A'),
      ('VƒÉn h·ªçc','B'),
      ('L·ªãch s·ª≠','C'),
      ('Kinh t·∫ø','D'),
      ('Khoa h·ªçc','E')
    `);
  }
}
initTables();

// ===== Helper: suy lu·∫≠n th·ªÉ lo·∫°i =====
async function inferCategory(bookName, author) {
  const prompt = `
  B·∫°n l√† qu·∫£n th·ªß th∆∞ vi·ªán.
  V·ªõi s√°ch "${bookName}" c·ªßa t√°c gi·∫£ "${author}", h√£y ƒëo√°n th·ªÉ lo·∫°i ph√π h·ª£p trong c√°c nh√≥m:
  - C√¥ng ngh·ªá
  - VƒÉn h·ªçc
  - L·ªãch s·ª≠
  - Kinh t·∫ø
  - Khoa h·ªçc

  Ch·ªâ tr·∫£ v·ªÅ 1 t·ª´: t√™n th·ªÉ lo·∫°i.
  `;
  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: prompt
  });
  const text = response.response.candidates[0].content.parts[0].text.trim();
  return text || "Ch∆∞a r√µ";
}

// ===== Helper: t√¨m v·ªã tr√≠ d·ª±a v√†o category =====
async function findPosition(category) {
  // L·∫•y prefix
  const result = await pool.query("SELECT prefix FROM categories WHERE name=$1", [category]);
  if (result.rows.length === 0) return "?";
  const prefix = result.rows[0].prefix;

  // Ki·ªÉm tra k·ªá ƒë√£ ƒë·∫ßy ch∆∞a (15 quy·ªÉn/k·ªá)
  let shelf = 1;
  while (true) {
    const position = `${prefix}${shelf}`;
    const count = await pool.query("SELECT COUNT(*) FROM books WHERE position=$1", [position]);
    if (parseInt(count.rows[0].count) < 15) {
      return position;
    }
    shelf++;
  }
}

// ===== API Chat ch√≠nh =====
app.post("/chat", async (req, res) => {
  const { message } = req.body;
  if (!message) return res.status(400).json({ error: "Thi·∫øu 'message'" });

  try {
    // L∆∞u user message
    await pool.query("INSERT INTO conversations (role, message) VALUES ($1,$2)", ["user", message]);

    let reply = "";

    // N·∫øu user mu·ªën th√™m s√°ch
    if (message.toLowerCase().startsWith("add book")) {
      const match = message.match(/bn:\s*([^;]+);\s*at:\s*(.+)/i);
      if (match) {
        const bookName = match[1].trim();
        const author = match[2].trim();

        const category = await inferCategory(bookName, author);
        const position = await findPosition(category);

        await pool.query(
          "INSERT INTO books (name, author, category, position) VALUES ($1,$2,$3,$4)",
          [bookName, author, category, position]
        );

        reply = `‚úÖ ƒê√£ th√™m s√°ch: "${bookName}" (${author})\nTh·ªÉ lo·∫°i: ${category}\nV·ªã tr√≠: ${position}`;
      } else {
        reply = "‚ùå Sai c√∫ ph√°p. H√£y d√πng: `add book: bn: T√™n s√°ch; at: T√°c gi·∫£`";
      }
    }

    // N·∫øu user mu·ªën c·∫≠p nh·∫≠t th·ªÉ lo·∫°i
    else if (message.toLowerCase().includes("th·ªÉ lo·∫°i l√†")) {
      const match = message.match(/s√°ch\s+"(.+)"|(.+)\s+th·ªÉ lo·∫°i l√†\s+(.+)/i);
      if (match) {
        const bookName = match[1] || match[2];
        const newCategory = match[3].trim();
        const newPosition = await findPosition(newCategory);

        await pool.query(
          "UPDATE books SET category=$1, position=$2 WHERE name ILIKE $3",
          [newCategory, newPosition, `%${bookName}%`]
        );

        reply = `üîÑ ƒê√£ c·∫≠p nh·∫≠t th·ªÉ lo·∫°i cho "${bookName}" th√†nh ${newCategory}, v·ªã tr√≠: ${newPosition}`;
      } else {
        reply = "‚ùå Kh√¥ng hi·ªÉu s√°ch n√†o b·∫°n mu·ªën c·∫≠p nh·∫≠t.";
      }
    }

    // N·∫øu user mu·ªën xo√° s√°ch
    else if (message.toLowerCase().startsWith("delete book")) {
      const match = message.match(/bn:\s*([^;]+);\s*at:\s*(.+)/i);
      if (match) {
        const bookName = match[1].trim();
        const author = match[2].trim();

        const result = await pool.query("DELETE FROM books WHERE name=$1 AND author=$2 RETURNING *", [bookName, author]);
        if (result.rowCount > 0) {
          reply = `üóëÔ∏è ƒê√£ xo√° s√°ch "${bookName}" c·ªßa ${author}`;
        } else {
          reply = `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch "${bookName}" c·ªßa ${author}`;
        }
      } else {
        reply = "‚ùå Sai c√∫ ph√°p. H√£y d√πng: `delete book: bn: T√™n s√°ch; at: T√°c gi·∫£`";
      }
    }

    // N·∫øu ch·ªâ chat
    else {
      const history = await pool.query(
        "SELECT role, message FROM conversations ORDER BY created_at DESC LIMIT 10"
      );

      const historyText = history.rows.reverse()
        .map(h => `${h.role === "user" ? "Ng∆∞·ªùi d√πng" : "Tr·ª£ l√Ω"}: ${h.message}`)
        .join("\n");

      const prompt = `
      ƒê√¢y l√† h·ªôi tho·∫°i:
      ${historyText}

      Nhi·ªám v·ª•:
      - N·∫øu ng∆∞·ªùi d√πng c·∫ßn s√°ch, h√£y ch·ªçn t·ª´ DB.
      - Tr·∫£ v·ªÅ: T√™n, T√°c gi·∫£, Th·ªÉ lo·∫°i, V·ªã tr√≠.
      - N·∫øu ch·ªâ tr√≤ chuy·ªán, tr·∫£ l·ªùi t·ª± nhi√™n.
      `;

      const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt
      });

      reply = response.response.candidates[0].content.parts[0].text || "Kh√¥ng c√≥ ph·∫£n h·ªìi.";
    }

    // L∆∞u tr·∫£ l·ªùi
    await pool.query("INSERT INTO conversations (role, message) VALUES ($1,$2)", ["assistant", reply]);

    res.json({ reply });
  } catch (err) {
    console.error("Chat error:", err);
    res.status(500).json({ error: err.message });
  }
});

// ===== Route tr·∫£ v·ªÅ index.html =====
import { readFile } from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

app.get("/", async (req, res) => {
  const html = await readFile(path.join(__dirname, "index.html"), "utf-8");
  res.send(html);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Server ch·∫°y tr√™n c·ªïng ${PORT}`);
});
