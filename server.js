// server.js (final: natural chat + recap fix + full context)
import express from "express";
import bodyParser from "body-parser";
import pkg from "pg";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";
import path from "path";
import { fileURLToPath } from "url";

dotenv.config();

const app = express();
app.use(bodyParser.json());

// ===== path helpers =====
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ===== Postgres setup =====
const { Pool } = pkg;
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// ===== Gemini setup =====
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// ===== init tables =====
async function initTables() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS books (
      id SERIAL PRIMARY KEY,
      name TEXT NOT NULL,
      author TEXT NOT NULL,
      category TEXT,
      position TEXT,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);

  await pool.query(`
    CREATE TABLE IF NOT EXISTS conversations (
      id SERIAL PRIMARY KEY,
      role TEXT NOT NULL,
      message TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);
}
await initTables();

// seed if needed (keeps behavior you used before)
import("./seedBooks.js").catch(()=>{/* ignore if missing */});

// ===== helpers =====
function extractFirstJson(text) {
  if (!text || typeof text !== "string") return null;
  const match = text.match(/\{[\s\S]*\}/);
  if (!match) return null;
  try {
    return JSON.parse(match[0]);
  } catch (e) {
    return null;
  }
}

async function assignPosition(category) {
  if (!category) return "X?";
  const letter = category.trim()[0]?.toUpperCase() || "X";
  const res = await pool.query("SELECT COUNT(*) FROM books WHERE category = $1", [category]);
  const count = parseInt(res.rows[0].count || "0", 10);
  const shelf = Math.floor(count / 15) + 1;
  return `${letter}${shelf}`;
}

async function inferCategory(bookName, author) {
  const lower = bookName.toLowerCase();

  // ===== 1Ô∏è‚É£ T·ª± ƒë·ªông nh·∫≠n d·∫°ng theo t·ª´ kh√≥a (ch·∫°y c·ª±c nhanh, kh√¥ng g·ªçi API) =====
  if (/(l·ªãch s·ª≠|history|s·ª≠ k√Ω|c√°ch m·∫°ng|chi·∫øn tranh|revolution|empire)/i.test(lower)) return "L·ªãch s·ª≠";
  if (/(python|l·∫≠p tr√¨nh|code|js|java|react|data|ai|machine|khoa h·ªçc m√°y t√≠nh|dev)/i.test(lower)) return "C√¥ng ngh·ªá";
  if (/(t√¢m l√Ω|ƒë·∫Øc nh√¢n t√¢m|th√≥i quen|h√†nh vi|ƒë·ªông l·ª±c|ph√°t tri·ªÉn b·∫£n th√¢n|self-help|self help|motivation)/i.test(lower)) return "T√¢m l√Ω";
  if (/(kinh t·∫ø|ƒë·∫ßu t∆∞|t√†i ch√≠nh|money|economics|business|market)/i.test(lower)) return "Kinh t·∫ø";
  if (/(vƒÉn h·ªçc|ti·ªÉu thuy·∫øt|th∆°|truy·ªán|novel|story|poem|k√Ω)/i.test(lower)) return "VƒÉn h·ªçc";
  if (/(tri·∫øt h·ªçc|philosophy|ƒë·∫°o ƒë·ª©c|ch√≠nh tr·ªã|t∆∞ t∆∞·ªüng)/i.test(lower)) return "Tri·∫øt h·ªçc";
  if (/(gi√°o d·ª•c|education|h·ªçc t·∫≠p|s∆∞ ph·∫°m)/i.test(lower)) return "Gi√°o d·ª•c";
  if (/(y h·ªçc|medicine|b·ªánh|s·ª©c kh·ªèe|health|chƒÉm s√≥c)/i.test(lower)) return "Y h·ªçc";

  // ===== 2Ô∏è‚É£ N·∫øu kh√¥ng ch·∫Øc, h·ªèi Gemini ƒë·ªÉ d·ª± ƒëo√°n =====
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    const prompt = `
X√°c ƒë·ªãnh th·ªÉ lo·∫°i s√°ch ph√π h·ª£p nh·∫•t (ch·ªâ m·ªôt t·ª´) trong c√°c lo·∫°i sau:
["VƒÉn h·ªçc","L·ªãch s·ª≠","T√¢m l√Ω","C√¥ng ngh·ªá","Kinh t·∫ø","Tri·∫øt h·ªçc","Gi√°o d·ª•c","Y h·ªçc","Ch√≠nh tr·ªã","Kh√°c"]

T√™n s√°ch: "${bookName}"
T√°c gi·∫£: "${author}"

Ch·ªâ tr·∫£ v·ªÅ JSON d·∫°ng:
{"category":"<T√™n th·ªÉ lo·∫°i>"}
`;
    const result = await model.generateContent(prompt);
    const raw = result.response.text();
    const parsed = extractFirstJson(raw);
    return parsed?.category || "Kh√°c";
  } catch (e) {
    console.error("‚ö†Ô∏è inferCategory error:", e);
    return "Kh√°c";
  }
}


async function askGeminiToChoose(message, books, conversationContext = "") {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

  const prompt = `
B·∫°n l√† tr·ª£ l√Ω th∆∞ vi·ªán. D·ª±a tr√™n ƒëo·∫°n h·ªôi tho·∫°i g·∫ßn ƒë√¢y:
${conversationContext}

Ng∆∞·ªùi d√πng v·ª´a n√≥i: "${message}"

Danh s√°ch s√°ch: ${JSON.stringify(books, null, 2)}

Tr·∫£ v·ªÅ JSON duy nh·∫•t:
{
 "title": "T√™n s√°ch EXACT t·ª´ DB",
 "author": "T√°c gi·∫£ EXACT t·ª´ DB",
 "category": "Th·ªÉ lo·∫°i EXACT t·ª´ DB",
 "location": "V·ªã tr√≠ EXACT t·ª´ DB",
 "reason": "Gi·∫£i th√≠ch ng·∫Øn (1-2 c√¢u)"
}
`;

  try {
    const response = await model.generateContent(prompt);
    const raw = response.response.text();
    const parsed = extractFirstJson(raw);
    return parsed;
  } catch {
    return null;
  }
}

async function askGeminiForRecap(bookTitle, author) {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

  const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω t√≥m t·∫Øt s√°ch chuy√™n nghi·ªáp.
T√≥m t·∫Øt ng·∫Øn (100-200 t·ª´) n·ªôi dung, ch·ªß ƒë·ªÅ v√† ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi ƒë·ªçc c·ªßa cu·ªën:
- T√™n: "${bookTitle}"
- T√°c gi·∫£: "${author}"

Tr·∫£ v·ªÅ JSON duy nh·∫•t:
{"title":"${bookTitle}", "author":"${author}", "recap":"T√≥m t·∫Øt ng·∫Øn g·ªçn kh√¥ng qu√° 200 t·ª´"}
`;

  try {
    const response = await model.generateContent(prompt);
    const raw = response.response.text();
    const parsed = extractFirstJson(raw);
    return parsed;
  } catch {
    return null;
  }
}

// NEW: chat t·ª± nhi√™n v·ªõi Gemini n·∫øu kh√¥ng li√™n quan ƒë·∫øn s√°ch
async function chatWithGeminiFreeform(message, context = "") {
  const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
  const prompt = `
B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán, th√¥ng minh. 
Ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥:
${context}

Ng∆∞·ªùi d√πng: "${message}"

H√£y tr·∫£ l·ªùi t·ª± nhi√™n, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu (b·∫±ng ti·∫øng Vi·ªát).
`;

  try {
    const response = await model.generateContent(prompt);
    return response.response.text();
  } catch (e) {
    return "‚ö†Ô∏è Xin l·ªói, m√¨nh ch∆∞a th·ªÉ ph·∫£n h·ªìi l√∫c n√†y.";
  }
}

// ===== Serve index.html =====
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "index.html"));
});

// ===== /chat endpoint =====
app.post("/chat", async (req, res) => {
  const { message } = req.body;
  if (!message) return res.status(400).json({ error: "Thi·∫øu 'message'" });

  try {
    await pool.query("INSERT INTO conversations (role, message) VALUES ($1, $2)", ["user", message]);
    let reply = "";
    const lower = message.toLowerCase();

    // ADD BOOK
    if (lower.startsWith("add book")) {
      const match = message.match(/bn:\s*([^;]+);\s*at:\s*(.+)/i);
      if (!match) reply = "‚ùå Sai c√∫ ph√°p. D√πng: add book: bn: T√™n s√°ch; at: T√°c gi·∫£";
      else {
        const bookName = match[1].trim();
        const author = match[2].trim();
        const category = await inferCategory(bookName, author);
        const position = await assignPosition(category);
        await pool.query(
          "INSERT INTO books (name, author, category, position) VALUES ($1,$2,$3,$4)",
          [bookName, author, category, position]
        );
        reply = `‚úÖ ƒê√£ th√™m s√°ch: "${bookName}" (${author})\nTh·ªÉ lo·∫°i: ${category}\nV·ªã tr√≠: ${position}`;
      }
    }

    // DELETE BOOK
    else if (lower.startsWith("delete book")) {
      const match = message.match(/bn:\s*([^;]+);\s*at:\s*(.+)/i);
      if (!match) reply = "‚ùå Sai c√∫ ph√°p. D√πng: delete book: bn: T√™n s√°ch; at: T√°c gi·∫£";
      else {
        const bookName = match[1].trim();
        const author = match[2].trim();
        const result = await pool.query("DELETE FROM books WHERE name=$1 AND author=$2 RETURNING *", [bookName, author]);
        reply = result.rowCount ? `üóëÔ∏è ƒê√£ xo√° s√°ch "${bookName}" c·ªßa ${author}` : `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√°ch "${bookName}" c·ªßa ${author}`;
      }
    }

    // V·ªä TR√ç
    else if (/\bv·ªã tr√≠\s+[A-Z]\d+\b/i.test(lower)) {
      const m = lower.match(/\bv·ªã tr√≠\s+([A-Z]\d+)\b/i);
      const pos = m ? m[1].toUpperCase() : null;
      if (!pos) reply = "‚ö†Ô∏è H√£y nh·∫≠p v·ªã tr√≠ theo d·∫°ng v√≠ d·ª•: 'v·ªã tr√≠ B2 l√† quy·ªÉn g√¨'";
      else {
        const { rows } = await pool.query("SELECT name, author, category FROM books WHERE position=$1 LIMIT 1", [pos]);
        reply = rows.length
          ? `üìö ·ªû v·ªã tr√≠ ${pos}: "${rows[0].name}" (${rows[0].author})\nTh·ªÉ lo·∫°i: ${rows[0].category || "Ch∆∞a r√µ"}`
          : `üì≠ Kh√¥ng c√≥ s√°ch ·ªü v·ªã tr√≠ ${pos}.`;
      }
    }

    // RECAP (fix)
    else if (/\b(t√≥m t·∫Øt|recap|summary)\b/i.test(lower)) {
      let guess = message.replace(/["'‚Äò‚Äô‚Äú‚Äù]/g, "").toLowerCase();
      guess = guess.replace(/\b(recape?|t√≥m t·∫Øt|summary|gi√∫p|cu·ªën|s√°ch|h√£y|n·ªôi dung|cho t√¥i|v·ªÅ|ƒëi)\b/g, "").trim();

      let target = null;
      const q = await pool.query(
        `SELECT name, author, category, position FROM books 
         WHERE LOWER(name) LIKE $1 OR LOWER(author) LIKE $1 LIMIT 1`,
        [`%${guess}%`]
      );
      if (q.rows.length) target = q.rows[0];

      if (!target) {
        const all = await pool.query("SELECT name, author, category, position FROM books");
        for (const b of all.rows) {
          if (message.toLowerCase().includes(b.name.toLowerCase())) { target = b; break; }
        }
      }

      if (!target) reply = "‚ö†Ô∏è M√¨nh ch∆∞a r√µ b·∫°n mu·ªën t√≥m t·∫Øt quy·ªÉn n√†o. H√£y n√≥i t√™n s√°ch c·ª• th·ªÉ nh√©.";
      else {
        const recap = await askGeminiForRecap(target.name, target.author);
        reply = recap?.recap
          ? `üìñ "${target.name}" (${target.author})\nTh·ªÉ lo·∫°i: ${target.category || "Ch∆∞a r√µ"}, V·ªã tr√≠: ${target.position}\n\nüìù ${recap.recap}`
          : `‚ö†Ô∏è Kh√¥ng t√≥m t·∫Øt ƒë∆∞·ª£c l√∫c n√†y.`;
      }
    }

    // SEARCH or CHAT
    else {
      const { rows: books } = await pool.query("SELECT name, author, category, position FROM books");
      const histRes = await pool.query("SELECT role, message FROM conversations ORDER BY id DESC LIMIT 6");
      const recent = histRes.rows.reverse().map(r => `${r.role === "user" ? "Ng∆∞·ªùi d√πng" : "Tr·ª£ l√Ω"}: ${r.message}`).join("\n");

      const keywords = message.toLowerCase();
      const directMatch = books.filter(b =>
        (b.name && b.name.toLowerCase().includes(keywords)) ||
        (b.author && b.author.toLowerCase().includes(keywords)) ||
        (b.category && b.category.toLowerCase().includes(keywords))
      );

      // n·∫øu kh√¥ng c√≥ s√°ch li√™n quan -> chat t·ª± nhi√™n
      if (!books.length || (!directMatch.length && /th·ªùi ti·∫øt|t√¢m tr·∫°ng|ai l√†|l√† g√¨|t·∫°i sao|nh∆∞ th·∫ø n√†o|bao nhi√™u|·ªü ƒë√¢u|ai vi·∫øt/i.test(message))) {
        reply = await chatWithGeminiFreeform(message, recent);
      } else {
        let chosen = null;
        if (directMatch.length === 1) {
          chosen = directMatch[0];
          reply = `üìö G·ª£i √Ω: "${chosen.name}" (${chosen.author})\nTh·ªÉ lo·∫°i: ${chosen.category || "Ch∆∞a r√µ"}, V·ªã tr√≠: ${chosen.position}`;
        } else {
          const pick = await askGeminiToChoose(message, directMatch.length ? directMatch : books, recent);
          if (pick && pick.title) {
            const rec = (directMatch.length ? directMatch : books).find(b => b.name === pick.title) || books[0];
            reply = `üìö G·ª£i √Ω: "${rec.name}" (${rec.author})\nTh·ªÉ lo·∫°i: ${rec.category || "Ch∆∞a r√µ"}, V·ªã tr√≠: ${rec.position}\nüí° ${pick.reason || ""}`;
          } else {
            reply = await chatWithGeminiFreeform(message, recent);
          }
        }
      }
    }

    await pool.query("INSERT INTO conversations (role, message) VALUES ($1, $2)", ["assistant", reply]);
    res.json({ reply });
  } catch (err) {
    console.error("‚ùå Chat error:", err);
    res.status(500).json({ error: err.message });
  }
});

//cc
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ Server ƒëang ch·∫°y tr√™n c·ªïng ${PORT}`));
