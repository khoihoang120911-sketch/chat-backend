// Map th·ªÉ lo·∫°i sang ch·ªØ c√°i
const categoryMap = {
  "L·ªãch s·ª≠": "L",
  "T√¢m l√Ω": "T",
  "VƒÉn h·ªçc": "V",
  "Khoa h·ªçc": "K",
  "Tri·∫øt h·ªçc": "P",
  "Kinh t·∫ø": "E",
  "Ch√≠nh tr·ªã": "C",
  "Kh√°c": "X"
};

// H√†m t√≠nh v·ªã tr√≠
function assignPosition(book) {
  const prefix = categoryMap[book["Th·ªÉ lo·∫°i"]] || "X";
  const sameCategory = books.filter(b => b["Th·ªÉ lo·∫°i"] === book["Th·ªÉ lo·∫°i"]);
  const index = sameCategory.length;
  const shelf = Math.floor(index / 15) + 1;
  return `${prefix}${shelf}`;
}

// Endpoint chat
app.post("/chat", async (req, res) => {
  const { message } = req.body;
  if (!message) return res.status(400).json({ error: "Thi·∫øu field 'message' trong body" });

  try {
    // --- TH√äM S√ÅCH ---
    if (message.toLowerCase().startsWith("add book")) {
      const match = message.match(/bn:\s*(.+?); at:\s*(.+)$/i);
      if (!match) return res.json({ reply: "‚ùå Sai c√∫ ph√°p. H√£y d√πng: add book: bn: T√™n; at: T√°c gi·∫£" });

      const title = match[1].trim();
      const author = match[2].trim();

      // H·ªèi Gemini th·ªÉ lo·∫°i
      const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: `H√£y cho bi·∫øt th·ªÉ lo·∫°i (1 t·ª´ ng·∫Øn g·ªçn nh∆∞ L·ªãch s·ª≠, VƒÉn h·ªçc, Khoa h·ªçc, T√¢m l√Ω,...) cho quy·ªÉn s√°ch "${title}" c·ªßa t√°c gi·∫£ "${author}".`
      });

      const category = response?.text?.trim() || "Kh√°c";

      const newBook = {
        "T√™n s√°ch": title,
        "T√°c gi·∫£": author,
        "Th·ªÉ lo·∫°i": category,
        "V·ªã tr√≠": "", // s·∫Ω t√≠nh
        "T√≥m t·∫Øt": "Ch∆∞a c√≥"
      };
      newBook["V·ªã tr√≠"] = assignPosition(newBook);

      books.push(newBook);
      XLSX.utils.sheet_add_json(sheet, [newBook], { skipHeader: true, origin: -1 });
      XLSX.writeFile(workbook, excelPath);

      return res.json({ reply: `‚úÖ ƒê√£ th√™m s√°ch:\n${JSON.stringify(newBook, null, 2)}` });
    }

    // --- X√ìA S√ÅCH ---
    if (message.toLowerCase().startsWith("remove book")) {
      const match = message.match(/bn:\s*(.+?); at:\s*(.+)$/i);
      if (!match) return res.json({ reply: "‚ùå Sai c√∫ ph√°p. H√£y d√πng: remove book: bn: T√™n; at: T√°c gi·∫£" });

      const title = match[1].trim();
      const author = match[2].trim();

      const index = books.findIndex(b => b["T√™n s√°ch"] === title && b["T√°c gi·∫£"] === author);
      if (index === -1) return res.json({ reply: "‚ùå Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ x√≥a." });

      const removed = books.splice(index, 1)[0];
      const newSheet = XLSX.utils.json_to_sheet(books);
      workbook.Sheets[workbook.SheetNames[0]] = newSheet;
      XLSX.writeFile(workbook, excelPath);

      return res.json({ reply: `üóëÔ∏è ƒê√£ x√≥a s√°ch: ${removed["T√™n s√°ch"]} - ${removed["T√°c gi·∫£"]}` });
    }

    // --- T√åM S√ÅCH ---
    const libraryText = books.map(b =>
      `T√™n: ${b["T√™n s√°ch"]}, T√°c gi·∫£: ${b["T√°c gi·∫£"]}, Th·ªÉ lo·∫°i: ${b["Th·ªÉ lo·∫°i"]}, V·ªã tr√≠: ${b["V·ªã tr√≠"]}, T√≥m t·∫Øt: ${b["T√≥m t·∫Øt"]}`
    ).join("\n");

    const prompt = `
    Ng∆∞·ªùi d√πng m√¥ t·∫£ t√¨nh tr·∫°ng ho·∫∑c mong mu·ªën: "${message}".
    ƒê√¢y l√† danh s√°ch s√°ch trong th∆∞ vi·ªán:
    ${libraryText}

    Nhi·ªám v·ª•:
    - Ch·ªçn **ch√≠nh x√°c 1 quy·ªÉn s√°ch** ph√π h·ª£p nh·∫•t.
    - Tr·∫£ v·ªÅ:
      T√™n s√°ch: ...
      T√°c gi·∫£: ...
      V·ªã tr√≠: ...
      Recap: ... (t·ªëi ƒëa 3 c√¢u)
    - N·∫øu kh√¥ng c√≥ s√°ch ph√π h·ª£p, tr·∫£ l·ªùi: "Xin l·ªói, hi·ªán kh√¥ng t√¨m th·∫•y s√°ch n√†o ph√π h·ª£p".
    `;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt
    });

    const reply = response?.text?.trim() || "Kh√¥ng c√≥ ph·∫£n h·ªìi.";
    res.json({ reply });

  } catch (err) {
    console.error("Gemini error:", err);
    res.status(500).json({ error: err?.message ?? String(err) });
  }
});
