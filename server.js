// server.js
import express from "express";
import cors from "cors";
import { GoogleGenAI } from "@google/genai";
import XLSX from "xlsx";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";

const app = express();
app.use(cors());
app.use(express.json());

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ƒê·ªçc file Excel
const excelPath = path.join(__dirname, "books.xlsx");
let workbook, sheet, books;
if (fs.existsSync(excelPath)) {
  workbook = XLSX.readFile(excelPath);
  sheet = workbook.Sheets[workbook.SheetNames[0]];
  books = XLSX.utils.sheet_to_json(sheet);
} else {
  books = [];
}

// H√†m l∆∞u Excel
function saveBooksToExcel(books) {
  const newSheet = XLSX.utils.json_to_sheet(books);
  const newWb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(newWb, newSheet, "Sheet1");
  XLSX.writeFile(newWb, excelPath);
}

// SDK Gemini
const ai = new GoogleGenAI({});

// ==================== CHAT ====================
app.post("/chat", async (req, res) => {
  const { message } = req.body;
  if (!message) return res.status(400).json({ error: "Thi·∫øu field 'message'" });

  try {
    // ----------------- ADD BOOK -----------------
    if (message.toLowerCase().startsWith("add book")) {
      // V√≠ d·ª•: add book: bn: T√™n; at: T√°c gi·∫£
      const regex = /bn:\s*(.+?);\s*at:\s*(.+)/i;
      const match = message.match(regex);
      if (!match) {
        return res.json({ reply: "‚ùå Sai c√∫ ph√°p. D√πng: add book: bn: <T√™n>; at: <T√°c gi·∫£>" });
      }
      const [_, tenSach, tacGia] = match;

      // Nh·ªù Gemini ƒëo√°n th·ªÉ lo·∫°i + v·ªã tr√≠
      const prompt = `
      H√£y ph√¢n lo·∫°i s√°ch "${tenSach}" c·ªßa ${tacGia}.
      Tr·∫£ v·ªÅ JSON: { "Th·ªÉ lo·∫°i": "...", "V·ªã tr√≠": "..." }
      `;
      const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt
      });

      let extra = {};
      try {
        extra = JSON.parse(response?.candidates?.[0]?.content?.parts?.[0]?.text ?? "{}");
      } catch {
        extra = { "Th·ªÉ lo·∫°i": "Ch∆∞a r√µ", "V·ªã tr√≠": "Kho chung" };
      }

      const newBook = {
        "T√™n s√°ch": tenSach.trim(),
        "T√°c gi·∫£": tacGia.trim(),
        "Th·ªÉ lo·∫°i": extra["Th·ªÉ lo·∫°i"] || "Ch∆∞a r√µ",
        "V·ªã tr√≠": extra["V·ªã tr√≠"] || "Kho chung",
        "T√≥m t·∫Øt": "Ch∆∞a c√≥"
      };

      books.push(newBook);
      saveBooksToExcel(books);

      return res.json({ reply: `‚úÖ ƒê√£ th√™m s√°ch:\n${JSON.stringify(newBook, null, 2)}` });
    }

    // ----------------- REMOVE BOOK -----------------
    if (message.toLowerCase().startsWith("remove book")) {
      // V√≠ d·ª•: remove book: bn: T√™n; at: T√°c gi·∫£
      const regex = /bn:\s*(.+?);\s*at:\s*(.+)/i;
      const match = message.match(regex);
      if (!match) {
        return res.json({ reply: "‚ùå Sai c√∫ ph√°p. D√πng: remove book: bn: <T√™n>; at: <T√°c gi·∫£>" });
      }
      const [_, tenSach, tacGia] = match;

      const index = books.findIndex(
        b => b["T√™n s√°ch"].toLowerCase() === tenSach.trim().toLowerCase() &&
             b["T√°c gi·∫£"].toLowerCase() === tacGia.trim().toLowerCase()
      );

      if (index === -1) {
        return res.json({ reply: "‚ùå Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ xo√°." });
      }

      const removed = books.splice(index, 1);
      saveBooksToExcel(books);

      return res.json({ reply: `üóëÔ∏è ƒê√£ xo√° s√°ch:\n${JSON.stringify(removed[0], null, 2)}` });
    }

    // ----------------- SEARCH BOOK -----------------
    const libraryText = books.map(b =>
      `T√™n: ${b["T√™n s√°ch"]}, T√°c gi·∫£: ${b["T√°c gi·∫£"]}, Th·ªÉ lo·∫°i: ${b["Th·ªÉ lo·∫°i"]}, V·ªã tr√≠: ${b["V·ªã tr√≠"]}, T√≥m t·∫Øt: ${b["T√≥m t·∫Øt"]}`
    ).join("\n");

    const prompt = `
    Ng∆∞·ªùi d√πng m√¥ t·∫£: "${message}"
    ƒê√¢y l√† danh s√°ch s√°ch trong th∆∞ vi·ªán:
    ${libraryText}

    Nhi·ªám v·ª•:
    - Ch·ªçn ra ch√≠nh x√°c 1 quy·ªÉn s√°ch ph√π h·ª£p nh·∫•t v·ªõi y√™u c·∫ßu ng∆∞·ªùi d√πng.
    - Tr·∫£ v·ªÅ:
      T√™n s√°ch: ...
      T√°c gi·∫£: ...
      Th·ªÉ lo·∫°i: ...
      V·ªã tr√≠: ...
      Recap: ... (ng·∫Øn g·ªçn t·ªëi ƒëa 3 c√¢u)
    - N·∫øu kh√¥ng c√≥ s√°ch ph√π h·ª£p, tr·∫£ l·ªùi: "Xin l·ªói, kh√¥ng t√¨m th·∫•y s√°ch n√†o ph√π h·ª£p."
    `;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt
    });

    const replyRaw = response?.candidates?.[0]?.content?.parts?.[0]?.text ?? "Kh√¥ng c√≥ ph·∫£n h·ªìi.";
    const reply = replyRaw.replace(/\n/g, "<br>");

    res.json({ reply });
  } catch (err) {
    console.error("Gemini error:", err);
    res.status(500).json({ error: err?.message ?? String(err) });
  }
});

// ==================== STATIC WEB ====================
app.use(express.static(__dirname));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ Server running on port ${PORT}`));
