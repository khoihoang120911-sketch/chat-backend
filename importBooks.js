import pkg from "pg";
import dotenv from "dotenv";
import xlsx from "xlsx";

dotenv.config();

// ===== PostgreSQL setup =====
const { Pool } = pkg;
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function importBooks() {
  try {
    // ===== ƒê·ªçc file Excel =====
    const workbook = xlsx.readFile("books.xlsx");
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    const rows = xlsx.utils.sheet_to_json(sheet);

    console.log(`üìñ ƒêang import ${rows.length} s√°ch t·ª´ Excel...`);

    // ===== X√≥a d·ªØ li·ªáu c≈© =====
    await pool.query("TRUNCATE TABLE books RESTART IDENTITY CASCADE");
    console.log("üóëÔ∏è ƒê√£ xo√° s·∫°ch d·ªØ li·ªáu c≈© trong b·∫£ng books.");

    // ===== Import t·ª´ng d√≤ng =====
    for (const row of rows) {
      const name = row["T√™n s√°ch"];
      const author = row["T√°c gi·∫£"];
      const category = row["Th·ªÉ lo·∫°i"];
      const position = row["V·ªã tr√≠"];

      if (!name || !author || !category || !position) {
        console.warn("‚ö†Ô∏è B·ªè qua v√¨ thi·∫øu d·ªØ li·ªáu:", row);
        continue;
      }

      await pool.query(
        "INSERT INTO books (name, author, category, position) VALUES ($1,$2,$3,$4)",
        [name, author, category, position]
      );

      // Log ƒë·∫ßy ƒë·ªß th√¥ng tin s√°ch
      console.log(`‚úÖ ƒê√£ th√™m: "${name}" | T√°c gi·∫£: ${author} | Th·ªÉ lo·∫°i: ${category} | V·ªã tr√≠: ${position}`);
    }

    // ===== Ki·ªÉm tra t·ªïng s·ªë s√°ch =====
    const result = await pool.query("SELECT COUNT(*) FROM books");
    console.log(`üéâ Import th√†nh c√¥ng! T·ªïng s·ªë s√°ch trong DB: ${result.rows[0].count}`);

    process.exit(0);
  } catch (err) {
    console.error("‚ùå L·ªói khi import:", err);
    process.exit(1);
  }
}

importBooks();
