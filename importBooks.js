// importBooks.js
import fs from "fs";
import xlsx from "xlsx";
import pkg from "pg";
import dotenv from "dotenv";

dotenv.config();
const { Pool } = pkg;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function importBooks() {
  try {
    if (!fs.existsSync("books.xlsx")) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y file books.xlsx trong repo!");
      process.exit(1);
    }

    const workbook = xlsx.readFile("books.xlsx");
    const sheetName = workbook.SheetNames[0];
    const rows = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);

    console.log(`üìñ ƒêang import ${rows.length} d√≤ng t·ª´ books.xlsx...`);

    for (const row of rows) {
      // Hi·ªÉn th·ªã row ƒë·ªÉ debug (b·∫°n s·∫Ω th·∫•y log tr√™n Render)
      console.log("üëâ Row ƒë·ªçc ƒë∆∞·ª£c:", row);

      const title = row["T√™n s√°ch"] || row["title"] || row["Name"] || row["name"];
      const author = row["T√°c gi·∫£"] || row["author"] || row["Author"];
      const category = row["Th·ªÉ lo·∫°i"] || row["category"] || row["Category"] || null;
      const position = row["V·ªã tr√≠"] || row["position"] || row["V·ªã tr√≠ s√°ch"] || null;

      if (!title || !author) {
        console.warn("‚ö†Ô∏è B·ªè qua v√¨ thi·∫øu t√™n s√°ch ho·∫∑c t√°c gi·∫£:", row);
        continue;
      }

      try {
        // Ki·ªÉm tra t·ªìn t·∫°i
        const exists = await pool.query(
          "SELECT id FROM books WHERE name = $1 AND author = $2 LIMIT 1",
          [title, author]
        );
        if (exists.rowCount > 0) {
          // update n·∫øu mu·ªën c·∫≠p nh·∫≠t th√¥ng tin (category/position)
          await pool.query(
            `UPDATE books SET category = COALESCE($3, category), position = COALESCE($4, position) WHERE id = $5`,
            [category, position, category, position, exists.rows[0].id]
          );
          console.log(`‚ôªÔ∏è ƒê√£ c·∫≠p nh·∫≠t (ƒë√£ t·ªìn t·∫°i): ${title} (${author})`);
        } else {
          await pool.query(
            `INSERT INTO books (name, author, category, position) VALUES ($1,$2,$3,$4)`,
            [title, author, category, position]
          );
          console.log(`‚úÖ ƒê√£ th√™m: ${title} (${author})`);
        }
      } catch (err) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω "${title}":`, err.message);
      }
    }

    console.log("üéâ ImportBooks ho√†n t·∫•t!");
    await pool.end();
    process.exit(0);
  } catch (err) {
    console.error("‚ùå L·ªói importBooks:", err);
    await pool.end();
    process.exit(1);
  }
}

importBooks();
